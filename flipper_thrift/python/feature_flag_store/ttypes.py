# Copyright 2018 eShares, Inc. dba Carta, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class FeatureFlagStoreItem(object):
    """
    Attributes:
     - feature_name
     - is_enabled
     - meta
    """


    def __init__(self, feature_name=None, is_enabled=None, meta=None,):
        self.feature_name = feature_name
        self.is_enabled = is_enabled
        self.meta = meta

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.feature_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.meta = FeatureFlagStoreMeta()
                    self.meta.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FeatureFlagStoreItem')
        if self.feature_name is not None:
            oprot.writeFieldBegin('feature_name', TType.STRING, 1)
            oprot.writeString(self.feature_name.encode('utf-8') if sys.version_info[0] == 2 else self.feature_name)
            oprot.writeFieldEnd()
        if self.is_enabled is not None:
            oprot.writeFieldBegin('is_enabled', TType.BOOL, 2)
            oprot.writeBool(self.is_enabled)
            oprot.writeFieldEnd()
        if self.meta is not None:
            oprot.writeFieldBegin('meta', TType.STRUCT, 3)
            self.meta.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.feature_name is None:
            raise TProtocolException(message='Required field feature_name is unset!')
        if self.is_enabled is None:
            raise TProtocolException(message='Required field is_enabled is unset!')
        if self.meta is None:
            raise TProtocolException(message='Required field meta is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeatureFlagStoreMeta(object):
    """
    Attributes:
     - created_date
     - client_data
    """


    def __init__(self, created_date=None, client_data=None,):
        self.created_date = created_date
        self.client_data = client_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.created_date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.client_data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FeatureFlagStoreMeta')
        if self.created_date is not None:
            oprot.writeFieldBegin('created_date', TType.I64, 1)
            oprot.writeI64(self.created_date)
            oprot.writeFieldEnd()
        if self.client_data is not None:
            oprot.writeFieldBegin('client_data', TType.STRING, 2)
            oprot.writeString(self.client_data.encode('utf-8') if sys.version_info[0] == 2 else self.client_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.created_date is None:
            raise TProtocolException(message='Required field created_date is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FeatureFlagStoreItem)
FeatureFlagStoreItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'feature_name', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'is_enabled', None, None, ),  # 2
    (3, TType.STRUCT, 'meta', [FeatureFlagStoreMeta, None], None, ),  # 3
)
all_structs.append(FeatureFlagStoreMeta)
FeatureFlagStoreMeta.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'created_date', None, None, ),  # 1
    (2, TType.STRING, 'client_data', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
